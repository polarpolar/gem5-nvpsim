2017/12/10
13:10 	Why the peripheral not failure
13:10 	remove energy consume and harvest logs. 
13:10 	remove leakage logs, msg calling when type == 0.
14:06 	add the log of power failure.
14:15 	Still cannot fail. The capacitor never meet the lower bound. It is strange. I change the logs and show the upper and lower bound. I hope to see the energy changes.
14:31 	现在的问题是，系统在能量达到Upper bound之后没有出发EngyMsg, 不知道为什么。
14:39 	Maybe the reason is leakage, show the leakages.
15:10 	Add the Energy Remained before calling the state machine.
15:14 	问题1：之前的log输出的energy remain信息是错误的。（解决）
15:18 	问题2：能量消耗的太慢了。下一步，找到外设的消耗。（解决）
15:18 	看不到外设消耗能量的信息。
15:29 	问题3：依然是电容太大、太阳能太强了。（解决）
	问题4: 外设recover的时候似乎没有消耗能量。（解决）
15:36	能量消耗加了10倍，电容减半。
	问题5：不知道电容是怎么配置的，为什么是*50？？（解决）
	增加了电容的输出log
16:01	问题5解决：电容和能量系数写反了。
	问题4解决：改错地方了。
	外设的能量增加了十倍，写在了vdev.cc里面。
16:12	出了新的错误，是vdev中又一个assert出错了，但是无法确认错误在哪里。
	1. 尝试恢复外设的消耗。
16:19	恢复了外设的消耗之后，不知道为什么就好了。到底是哪一个状态出错了呢？
16:23	这回在外面写好了能耗加十倍。
16:27	好像能耗还是有点问题，再改一改试试。
16:33	调用错了python文件：我应该用test_engy_vdev.py的。
16:47	状态机的状态不稳定！这是因为输入的状态有错误。
16:53	再一次报错，还是assert的问题。
	没有找到逻辑错，删掉了两个assert看看有什么问题。
17:06	还是不对，很疲倦，现在改不下去了。

2017/12/11
08:30	处理昨天的assertion问题。主要问题是不知道定位在那里，也没有办法debug。所以，这次通过增加了一个debug信息的方式把哪里出错了check一下，确认是不是真的"interrupt.schedule()"报错了。
08:48	找到错误：因为状态连续跳转，导致系统连续两次deschedule了任务。应该是busy状态没有及时清除。
09:10 	busy状态不应该清楚。这是因为busy状态作为一个标签是用来恢复外设的。因此，我们需要设计状态，不能直接从active到poweroff，而是active到retention，然后再通过leakage到poweroff。为此在state_machine中增加了等于retention_threshold的lowerbound变量，并替换了energyMgmt中的lower_bound。
09:30	出了低级错误，重新编译。
09:36	还是不对，应该把变量加在BaseEnergySM里面，再试一次。
09:39	这次应该是对了。
09:42	lower_bound需要比retention_threshold略小，判定条件也应该带等于号才能保证完备性。
09:53	1. 上电之后缺少能量判定？
	2. 需要显示外设状态。
10:04	问题一解决。目前需要调整参数。

14:21	问题2: vdev recover cycle < self cycle. (解决)
14:35	问题3: vdev运行成功以后，在interrupt还没有结束之前，processor把能量耗尽了。目前一口气抽干的模式是不好用的。
	问题4: init函数和activate函数一个是串行的，一个是并行的，目前没有区分开。init不应该触发中断的。
14:39	目前的处理器能耗太大了。

2017/12/20
13:35	Why am I coming to work so late??? What did I do last ten days???
13:37	今天的任务是把能量消耗的单位转化为每个周期实现。
13:39	我觉得，我们现在需要做的事儿是，找到如何给vdev一个函数，让系统每个tick都调用它。

2017/12/24
17:30	我们发现，cpu的周期运行是通过tickEvent的tick()函数调用的，这是程序的主要仿真函数。然而，目前tick()是如何被调用的，还不是很清楚。为了在VirtualDevice中，实现类似的功能，我们在VirtualDevice中定义了相同的tickEvent。下面需要完成两件事儿：
	1. VirtualDevice中的tickEvent是正确的。
	2. 将这个tick加入Simulation。

17:57	针对tickEvent，我们在头文件中定义了private成员tickEvent，里面包含三个函数和一个成员。此外，在EventQueue的文件中，我们定义了VDEV的tick任务的优先级。在vdev的C文件中，我们在构建函数中增加了tickEvent，在析构函数中增加了任务的解调度。

2017/12/25
09:20	对于上述定义的tickEvent继续debug，同时检索如何将tick函数加入Simulation。
10:30	第一个问题解决了：
	1. Virtual Device 中的TickEvent目前是正确的，主要问题是定义成员的顺序有问题，为什么？
	现在解决第二个问题，如何将tick加入Simulation。
	（1）笨方法：把tickEvent加入到CPU的tick中就好了。
	（2）想办法和CPU的tickEvent并列。













