C51 COMPILER V9.00   TMP100                                                                11/10/2017 22:21:30 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE TMP100
OBJECT MODULE PLACED IN tmp100.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE tmp100.c LARGE ROM(COMPACT) DEBUG OBJECTEXTEND

line level    source

   1          /****************************************/
   2          /* Configure Funcion for tmp100                 */
   3          /* Temperature Sensor                                   */
   4          /* Author: Wu Tongda                                    */
   5          /* Tsinghua EE NICS                                             */
   6          /* Final Time: 2014/04/17                               */
   7          /****************************************/
   8          #include "tmp100.h"
   9          #include "LCD.h"
  10          
  11          /*****************************************/
  12          /* Prepare of tmp100                                     */
  13          /*****************************************/
  14          void tmpPre(){
  15   1              I2C_rst();
  16   1              I2C_initial();
  17   1              
  18   1              // Slave Address
  19   1              //ADDR0 = 0;
  20   1              //ADDR1 = 0;    
  21   1      }
  22          
  23          /*****************************************/
  24          /* initialization of tmp100                              */
  25          /* resolution: 12bits;                                   */
  26          /* range: -55~125;                                               */
  27          /* Continuous Mode.                                              */
  28          /*****************************************/
  29          void tmpInit(){
  30   1              uchar cmd[2];   
  31   1      
  32   1              tmpPre();
  33   1      
  34   1              // Configuration
  35   1              cmd[0] = 0x60;  // 0110_0000 1ShutDown/0Continuous
  36   1              cmd[1] = 0x00;
  37   1              I2C_w(TMP100_SLA_ADDR, TMP100_CON_ADDR, cmd, 1);
  38   1              cmd[0] = 0xC9;
  39   1              cmd[1] = 0x00;
  40   1              I2C_w(TMP100_SLA_ADDR, TMP100_TML_ADDR, cmd, 2);
  41   1              cmd[0] = 0x7D;
  42   1              cmd[1] = 0x00;
  43   1              I2C_w(TMP100_SLA_ADDR, TMP100_TMH_ADDR, cmd, 2);
  44   1      }
  45          
  46          /****************************************/
  47          /* Set resolution of tmp100                             */
  48          /* resolution(4-steps):                                 */
  49          /*      9bits(res=0),                                           */
  50          /*      10bits(res=1),                                          */
  51          /*      11bits(res=2),                                          */
  52          /*      12bits(res=3).                                          */
  53          /****************************************/
  54          void tmpSetRes(uint res){
  55   1              uchar cmd;
C51 COMPILER V9.00   TMP100                                                                11/10/2017 22:21:30 PAGE 2   

  56   1      
  57   1              tmpPre();
  58   1       /*
  59   1              if(res>3||res<0){
  60   1                      LCD_show(0xEAA0);
  61   1                      DelayMS(1000); 
  62   1                      return;
  63   1              }
  64   1       */
  65   1              I2C_r(TMP100_SLA_ADDR, TMP100_CON_ADDR, &cmd, 1);
  66   1              
  67   1              if(res==0)                                      // 9bits
  68   1                      cmd = (cmd&0x9F)|0x00;
  69   1              else if(res==1)                         // 10bits
  70   1                      cmd = (cmd&0x9F)|0x20;
  71   1              else if(res==2)                         // 11bits
  72   1                      cmd = (cmd&0x9F)|0x40;
  73   1              else if(res==3)                         // 12bits
  74   1                      cmd = (cmd&0x9F)|0x60;
  75   1      
  76   1              I2C_w(TMP100_SLA_ADDR, TMP100_CON_ADDR, &cmd, 1);
  77   1      }
  78          
  79          /****************************************/
  80          /* Set range of tmp100                                  */
  81          /* range(2-steps):                                              */
  82          /*      ran=0: -25~85;                                          */
  83          /*      ran=1: -55~125.                                         */
  84          /****************************************/
  85          /*
  86          void tmpSetRange(uint ran){
  87                  uchar cmd[2];
  88          
  89                  tmpPre();
  90                  
  91                  // temperature low
  92                  if(ran){
  93                          cmd[0] = 0xC9;
  94                          cmd[1] = 0x00;
  95                  }else{
  96                          cmd[0] = 0xE7;
  97                          cmd[1] = 0x00;
  98                  }
  99                  I2C_w(TMP100_SLA_ADDR, TMP100_TML_ADDR, cmd, 2);
 100                  
 101                  // temperature high
 102                  if(ran){
 103                          cmd[0] = 0x7D;
 104                          cmd[1] = 0x00;
 105                  }else{
 106                          cmd[0] = 0x55;
 107                          cmd[1] = 0x00;
 108                  }
 109                  I2C_w(TMP100_SLA_ADDR, TMP100_TMH_ADDR, cmd, 2);        
 110          }
 111          */
 112          
 113          /****************************************/
 114          /* Set Operation Mode                               */
 115          /* Mode(2-steps):                                               */
 116          /*      mode=0: Continuous Mode;                        */
 117          /*      mode=1: ShutDown Mode.                          */
C51 COMPILER V9.00   TMP100                                                                11/10/2017 22:21:30 PAGE 3   

 118          /****************************************/
 119          /*
 120          void tmpSetMode(uint mode){
 121                  uchar cmd;
 122          
 123                  tmpPre();
 124          
 125                  I2C_r(TMP100_SLA_ADDR, TMP100_CON_ADDR, &cmd, 1);
 126                  
 127                  if(mode)                                        // ShutDown Mode
 128                          cmd = (cmd&0xFE)|0x01;
 129                  else                                            // Continuous Mode
 130                          cmd = (cmd&0xFE)|0x00;
 131          
 132                  I2C_w(TMP100_SLA_ADDR, TMP100_CON_ADDR, &cmd, 1);               
 133          }
 134          */
 135          
 136          /****************************************/
 137          /* Get temperature from tmp100                  */
 138          /* Continuous Mode                                              */
 139          /****************************************/
 140          void tmpGetTmpCont(int *tmp){
 141   1              uchar dataRead[2];
 142   1      //      int *temp;
 143   1      
 144   1              // Read temperature
 145   1              //I2C_r(TMP100_SLA_ADDR, TMP100_TMP_ADDR, &dataRead, 2);
 146   1              I2C_r(TMP100_SLA_ADDR, TMP100_TMP_ADDR, &dataRead, 1);
 147   1              *tmp = dataRead[0];
 148   1              //LCD_show(*tmp);DelayMS(10000);
 149   1              //*temp = dataRead[1];
 150   1              //LCD_show(*temp>>4);DelayMS(10000);
 151   1              //*tmp = (*tmp<<4)|(*temp>>4);
 152   1              //*tmp=(*tmp<<8)>>8;
 153   1              *tmp=(*tmp<<8);
 154   1              //LCD_show(*tmp);DelayMS(1000);
 155   1      }
 156          /****************************************/
 157          /* Get temperature from tmp100                  */
 158          /* ShutDown Mode                                                */
 159          /****************************************/
 160          /*
 161          void tmpGetTmpShut(int *tmp){
 162                  uchar cmd;
 163                  uchar dataRead[2];
 164                  int temp;
 165          
 166                  tmpPre();
 167          
 168                  // Set OS(Configuration^1) = 1
 169                  I2C_r(TMP100_SLA_ADDR, TMP100_CON_ADDR, &cmd, 1);
 170                  if(~(cmd&0x80) || ~(cmd&0x01))
 171                          cmd |= 0x81;
 172                  I2C_w(TMP100_SLA_ADDR, TMP100_CON_ADDR, &cmd, 1);
 173                  wait(1,10);
 174                  
 175                  // Read temperature
 176                  I2C_r(TMP100_SLA_ADDR, TMP100_TMP_ADDR, &dataRead, 2);
 177                  *tmp = dataRead[0];
 178                  //LCD_show(*tmp);DelayMS(1000);
 179                  temp = dataRead[1];
C51 COMPILER V9.00   TMP100                                                                11/10/2017 22:21:30 PAGE 4   

 180                  //LCD_show(*temp);DelayMS(1000);
 181                  *tmp = (*tmp<<4)|(temp>>4);
 182                  //LCD_show(*tmp);DelayMS(1000);
 183                  
 184                  // Set OS Back to 0
 185                  cmd &= ~0x80;
 186                  I2C_w(TMP100_SLA_ADDR, TMP100_CON_ADDR, &dataRead, 1);
 187          }
 188          */
 189          /****************************************/
 190          /* Get temperature from tmp100                  */
 191          /* Any Mode                                                             */
 192          /****************************************/
 193          /*
 194          void tmpGetTmp(int *tmp){
 195                  uchar mode;
 196          
 197                  tmpPre();
 198          
 199                  // Get Mode
 200                  I2C_r(TMP100_SLA_ADDR, TMP100_CON_ADDR, &mode, 1);
 201          
 202                  if(mode&(0x01))
 203                          tmpGetTmpShut(tmp);
 204                  else
 205                          tmpGetTmpCont(tmp);     
 206          }
 207          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    296    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
