C51 COMPILER V9.00   SERIAL_PACKET_SAMPLE                                                  11/09/2017 14:19:45 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE SERIAL_PACKET_SAMPLE
OBJECT MODULE PLACED IN serial_packet_sample.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE serial_packet_sample.c LARGE ROM(COMPACT) DEBUG OBJECTEXTEND

line level    source

   1          #include "serial_packet.h"
*** WARNING C318 IN LINE 5 OF serial_packet.h: can't open file 'stdbool.h'
*** WARNING C318 IN LINE 6 OF serial_packet.h: can't open file 'io430x14x.h'
*** WARNING C219 IN LINE 32 OF SERIAL_PACKET.H: long constant truncated
*** ERROR C141 IN LINE 60 OF SERIAL_PACKET.H: syntax error near ','
*** ERROR C141 IN LINE 66 OF SERIAL_PACKET.H: syntax error near ','
   2          #include "uart.h"
*** WARNING C318 IN LINE 2 OF serial_packet_sample.c: can't open file 'uart.h'
   3          
   4          INT8U receive_buffer[MTU] = {1,3,5};
   5          INT8U send_buffer[MTU];
   6          INT8U send_prepare[120];
   7          int send_prepare_counter;
   8          INT8U ack_buffer[3] = {P_ACK, 0, 0};
   9          int send_counter;
  10          int send_busy = 0;
  11          
  12          static INT16U crc_byte(INT16U crc, INT8U b)
  13          {
  14   1          INT8U i;
  15   1          crc = crc ^ b << 8;
  16   1          i = 8;
  17   1          do
  18   1              if (crc & 0x8000)
  19   1                  crc = crc << 1 ^ 0x1021;
  20   1              else
  21   1                  crc = crc << 1;
  22   1          while (--i);
  23   1      
  24   1          return crc;
  25   1      }
  26          static INT16U crc_packet(INT8U *data, int len)
*** ERROR C141 IN LINE 26 OF SERIAL_PACKET_SAMPLE.C: syntax error near ','
  27          {
  28   1          INT16U crc = 0;
  29   1      
  30   1          while (len-- > 0)
  31   1              crc = crc_byte(crc, *data++);
*** ERROR C141 IN LINE 31 OF SERIAL_PACKET_SAMPLE.C: syntax error near 'data'
  32   1      
  33   1          return crc;
  34   1      }
  35          INT8U *read_serial_packet(int *len)
  36          {
  37   1          BOOLEAN in_sync; //记录是否已经同步记录
  38   1          BOOLEAN escaped; //记录上次是否是 ESCAPED码
  39   1          int receive_count;     //
  40   1          INT8U byte;
  41   1          
  42   1          in_sync = 0;// false
  43   1          escaped = 0;// false
  44   1          receive_count = 0;
  45   1      
  46   1          for (;;)
  47   1              {
C51 COMPILER V9.00   SERIAL_PACKET_SAMPLE                                                  11/09/2017 14:19:45 PAGE 2   

  48   2                  byte = USART3_GetCharBlock(0);//读取一个byte
  49   2      
  50   2                  /* 
  51   2                   * 如果不是同步状态，收到同步头就进入同步状态
  52   2                   */
  53   2                  if(!in_sync)
  54   2                      {
  55   3                          if (byte == SYNC_BYTE)
  56   3                              {
  57   4                                  in_sync = 1;
  58   4                                  receive_count = 0;
  59   4                                  escaped = 0;
  60   4                              }
  61   3                          continue;
  62   3                      }
  63   2                  /* 
  64   2                   * 数据长度越界，放弃同步，重新寻找同步数据头
  65   2                   */
  66   2                  if (receive_count >= MTU)
  67   2                      {
  68   3                          in_sync = 0;
  69   3                          continue;
  70   3                      }
  71   2                  /*
  72   2                   * 同步后内部数据处理
  73   2                   */
  74   2                  if (escaped) //如果上一个是替代byte
  75   2                      {
  76   3                          if (byte == SYNC_BYTE)/* sync byte following escape is an error, resync */
  77   3                              {
  78   4                                  in_sync = 1;
  79   4                                  receive_count = 0;
  80   4                                  escaped = 0;
  81   4                                  continue;
  82   4                              }
  83   3                          byte ^= 0x20;
  84   3                          escaped = 0;
  85   3                      }
  86   2                  else if (byte == ESCAPE_BYTE)
  87   2                      {
  88   3                          escaped = 1;
  89   3                          continue;
  90   3                      }
  91   2                  else if (byte == SYNC_BYTE)//收到最后一个数据包
  92   2                      {
  93   3                          int packet_len = receive_count;
  94   3                          INT16U read_crc, computed_crc;
  95   3      
  96   3                          receive_count = 0; /* ready for next packet */
  97   3                          if (packet_len < 4)
  98   3                              /* frames that are too small are ignored */
  99   3                              /* 重新开始同步 */
 100   3                              {
 101   4                                  in_sync = 1;
 102   4                                  receive_count = 0;
 103   4                                  escaped = 0;
 104   4                                  continue;
 105   4                              }
 106   3                          read_crc = receive_buffer[packet_len - 2] | receive_buffer[packet_len - 1] << 8;
 107   3                          computed_crc = crc_packet(receive_buffer, packet_len - 2);
 108   3                          
 109   3                          if (read_crc == computed_crc) 
C51 COMPILER V9.00   SERIAL_PACKET_SAMPLE                                                  11/09/2017 14:19:45 PAGE 3   

 110   3                              {
 111   4                                  *len = packet_len;
 112   4                                  return &receive_buffer[0];
 113   4                              }
 114   3                          else
 115   3                              {
 116   4                                  in_sync = 1;
 117   4                                  receive_count = 0;
 118   4                                  escaped = 0;
 119   4                                  /* We don't lose sync here. If we did, garbage on the line
 120   4                                     at startup will cause loss of the first packet. */
 121   4                                  continue;
 122   4                              }
 123   3                      }
 124   2                  receive_buffer[receive_count++] = byte;
 125   2              }
 126   1      }
 127          void add_send_buffer(INT8U byte)
 128          {
 129   1          if ((SYNC_BYTE == byte)||(ESCAPE_BYTE == byte))
 130   1              {
 131   2                  send_buffer[send_counter++] = ESCAPE_BYTE;
 132   2                  send_buffer[send_counter++] = byte ^ 0x20;
 133   2              }
 134   1          else
 135   1              {
 136   2                  send_buffer[send_counter++] = byte;
 137   2              }
 138   1      }
 139          int write_serial_packet(INT8U *data, int len)
 140          {
 141   1          INT16U send_crc;
 142   1          INT8U b;
 143   1          int i;
 144   1          if (len > 110){ return -1;}
 145   1          if (send_busy){ return -2;}
 146   1          //最好使用信号量来控制，暂时先用土方法
 147   1          send_busy = 1;
 148   1      
 149   1          send_crc = crc_packet(data, len);
 150   1          send_counter = 0;
 151   1          send_buffer[send_counter++] = SYNC_BYTE;
 152   1      
 153   1          for(i=0;i<len;i++)
 154   1              {
 155   2                  b = *(data + i);
 156   2                  add_send_buffer(b);
 157   2              }
 158   1          b = (INT8U)(send_crc & 0x00ff);
 159   1          add_send_buffer(b); 
 160   1                      b = (INT8U)((send_crc >> 8) & 0x00ff);
 161   1          add_send_buffer(b);
 162   1          send_buffer[send_counter++] = SYNC_BYTE;
 163   1          
 164   1          USART3_PutData((INT8U *)send_buffer, send_counter);
 165   1          send_busy = 0;
 166   1          return 1;
 167   1      }
 168          INT8U *get_active_message(int *len)
 169          {
 170   1          INT8U *get_data;
 171   1          int sf_len;
C51 COMPILER V9.00   SERIAL_PACKET_SAMPLE                                                  11/09/2017 14:19:45 PAGE 4   

 172   1          
 173   1          get_data = read_serial_packet(&sf_len);
 174   1          if (P_PACKET_ACK == *get_data)
 175   1              {
 176   2                  ack_buffer[1] = *(get_data + 1);
 177   2                  write_serial_packet(ack_buffer, 3);
 178   2              }
 179   1          *len = sf_len - 3;
 180   1          return (get_data + 3);
 181   1      }
 182          int write_active_message(INT8U *data, int len)
 183          {
 184   1          return 1;
 185   1      }
 186          void send_message_prepare(INT8U am_type)
 187          {
 188   1          send_prepare[0] = P_PACKET_NO_ACK;
 189   1          send_prepare[1]++;
 190   1          send_prepare[2] = 0;
 191   1          send_prepare[3] = 0xff;
 192   1          send_prepare[4] = 0xff;
 193   1          send_prepare[5] = 0;
 194   1          send_prepare[6] = 0;
 195   1          send_prepare[7] = 0; //这个字节用于规定数据包长度
 196   1          send_prepare[8] = 0; //group id
 197   1          send_prepare[9] = am_type;
 198   1          send_prepare_counter = 10;
 199   1      }
 200          int send_message_16_add(INT16U b2)
 201          {
 202   1          if (send_prepare_counter > 110)
 203   1              {
 204   2                  return -1;
 205   2              }
 206   1          send_message_add( (INT8U)((b2 >> 8) & 0xff) );
 207   1          return send_message_add( (INT8U)(b2 & 0xff) );
 208   1      }
 209          int send_message_add(INT8U byte)
 210          {
 211   1          /*
 212   1           * 这里进行AM message方式组包
 213   1           */ 
 214   1          if (send_prepare_counter > 110)
 215   1              {
 216   2                  send_prepare_counter = 0;
 217   2                  return -1;
 218   2              }
 219   1          else
 220   1              {
 221   2                  send_prepare[send_prepare_counter++] = byte;
 222   2                  return 1;
 223   2              }
 224   1      }
 225          int send_message(INT8U a)
 226          {
*** ERROR C236 IN LINE 226 OF SERIAL_PACKET_SAMPLE.C: 'send_message': different length of parameter lists
 227   1          if (send_prepare_counter > 9)
 228   1              {
 229   2                  send_prepare[7] = (INT8U)(send_prepare_counter - 10);
 230   2                  write_serial_packet(send_prepare, send_prepare_counter);
*** ERROR C208 IN LINE 230 OF SERIAL_PACKET_SAMPLE.C: '_write_serial_packet': too many actual parameters
 231   2                  return 1;
C51 COMPILER V9.00   SERIAL_PACKET_SAMPLE                                                  11/09/2017 14:19:45 PAGE 5   

 232   2              }
 233   1          else
 234   1              {
 235   2                  return -1;
 236   2              }
 237   1      }

C51 COMPILATION COMPLETE.  4 WARNING(S),  6 ERROR(S)
