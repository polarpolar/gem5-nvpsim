C51 COMPILER V9.00   NVRF                                                                  11/10/2017 22:21:30 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE NVRF
OBJECT MODULE PLACED IN NVRF.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE NVRF.c LARGE ROM(COMPACT) DEBUG OBJECTEXTEND

line level    source

   1          #include <NVRF.h>
   2          
   3          unsigned char xdata payload[PNum+2] _at_ 0x000000;//={0x56,0x86,0x4a,0x73,0x3d,0x45,0x01,0x30,0x90,0xf5};
   4          char code macCoorExtAddr[8]={0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA};
   5          char code macCoorShortAddr[2]={0xEF,0xBE};
   6          char code macPANId[2]={0xAD,0xDE};
   7          char code Char_Channel=0x1A;
   8          char code macDevShortAddr[2]={0xAA,0xAA};
   9          
  10          void wait1(int i, int j)
  11          {
  12   1              int m,n;
  13   1              for(m=0;m<i;m++)
  14   1                      for(n=0;n<j;n++)
  15   1                              {}
  16   1      }
  17          
  18          /*
  19          int delay1000()
  20          {
  21                  int i;
  22                  for(i=4000;i>0;i--){}
  23                  return 0;
  24          }       
  25          */
  26          
  27          void nvrf_wr(unsigned char adr, unsigned char dat)
  28          {
  29   1              P0=dat;
  30   1              P1=0x80|adr;
  31   1              P1=0x00;
  32   1      }
  33          
  34          //Write the configuration data to RF_CONF
  35          void nvrf_config()
  36          {
  37   1              int i=0;
  38   1              unsigned char adr=0x00;
  39   1              while(i<8)
  40   1              {
  41   2                      nvrf_wr(adr,macCoorExtAddr[i]);
  42   2                      adr=adr+0x01;
  43   2                      i=i+1;
  44   2              }
  45   1              i=0;
  46   1              while(i<2)
  47   1              {
  48   2                      nvrf_wr(adr,macCoorShortAddr[i]);
  49   2                      adr=adr+0x01;
  50   2                      i=i+1;
  51   2              }
  52   1              i=0;
  53   1              while(i<2)
  54   1              {
  55   2                      nvrf_wr(adr,macPANId[i]);
C51 COMPILER V9.00   NVRF                                                                  11/10/2017 22:21:30 PAGE 2   

  56   2                      adr=adr+0x01;
  57   2                      i=i+1;
  58   2              }       
  59   1              nvrf_wr(adr,Char_Channel);
  60   1              adr=adr+0x01;
  61   1      
  62   1              i=0;
  63   1              while(i<2)
  64   1              {
  65   2                      nvrf_wr(adr,macDevShortAddr[i]);
  66   2                      adr=adr+0x01;
  67   2                      i=i+1;
  68   2              }
  69   1              //read the configuration data in RF_CONF
  70   1              /*
  71   1              i=0;
  72   1              adr=0x00;
  73   1              while(i<16)
  74   1              {
  75   1                      P1=0x00|adr;
  76   1                      wait1(1,1);
  77   1                      //P3=P0;
  78   1                      adr=adr+0x01;
  79   1                      i=i+1;
  80   1              }
  81   1              P1=0x00;
  82   1              */
  83   1              return;
  84   1      }
  85          
  86          
  87          //Fill dara for trasmission to RF_DATA.
  88          void drill_buffer()
  89          {
  90   1              int i=0;
  91   1              unsigned char adr=0x10;
  92   1              //fill payload[] into RF_DATA
  93   1              while(i<PNum)
  94   1              {
  95   2                       P0=payload[i];
  96   2                       P1=0x80|adr;
  97   2                       P1=0x00;
  98   2                       adr=adr+0x01;
  99   2                       i=i+1;
 100   2              }
 101   1      
 102   1              
 103   1              //read the data in RF_DATA
 104   1              /*
 105   1              i=0;
 106   1              adr=0x10;
 107   1              while(i<10)
 108   1              {
 109   1                       P1=0x00|adr;
 110   1                       wait1(1,1);
 111   1                       //P3=P0;
 112   1                       adr=adr+0x01;
 113   1                       i=i+1;
 114   1              }
 115   1              P1=0x00;
 116   1              */
 117   1              return;
C51 COMPILER V9.00   NVRF                                                                  11/10/2017 22:21:30 PAGE 3   

 118   1      }
 119          
 120          //nvrf transmission function. length: number of transimission bytes   nvrf_choice: 0: ML7266 1:ML7396 
 121          void nvrf_start(char length, char nvrf_choice) 
 122          {
 123   1              P1=0x0F;
 124   1              wait1(1,1);
 125   1              if(P0^6==1)
 126   1              {
 127   2                      P0=0x40; // clear "DONE"
 128   2                      P1=0x80|0x0F;
 129   2                      P1=0x00;
 130   2              } 
 131   1              P0=(length<<2)+(nvrf_choice<<1)+0x01;      //configure NVRF_CFG register
 132   1              P1=0x80|0x0F;
 133   1              P1=0x00;   
 134   1      }
 135          
 136          
 137          //Power management function     
 138          int PMU_conf(char a, char b, char c, char d)
 139          {
 140   1              PMHSB=b;
 141   1              PMMSB=c;
 142   1              PMLSB=d;
 143   1              PMINST=a;
 144   1              PMINST=0;
 145   1              return 0;
 146   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    330    ----
   CONSTANT SIZE    =     15    ----
   XDATA SIZE       =   ----       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
