C51 COMPILER V9.53.0.0   KXTJ9_1005                                                        11/28/2016 16:31:24 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE KXTJ9_1005
OBJECT MODULE PLACED IN KXTJ9_1005.OBJ
COMPILER INVOKED BY: D:\ProgramFile\Keil_v5\C51\BIN\C51.EXE KXTJ9_1005.c LARGE ROM(COMPACT) OPTIMIZE(8,SPEED) DEBUG OBJE
                    -CTEXTEND TABS(2)

line level    source

   1          #include "KXTJ9_1005.h"
   2          #include "I2C.h"
   3          #include "LCD.h"
   4          
   5          //uint KXTJ9_SLAVE_ADDR = 0x0F;
   6          
   7          void KXTJ9_prep(){
   8   1        I2C_rst();
   9   1        I2C_initial();
  10   1        //KXTJ9_ADDR = 0;
  11   1      
  12   1      }
  13          
  14          void KXTJ9_Init(){
  15   1        
  16   1        uchar cmd[2];
  17   1        
  18   1        KXTJ9_prep();
  19   1        
  20   1        //Initialize CTRL_REG1                  //  ctrl-reg1 0000-0000
  21   1        //cmd[0] = 0x00;
  22   1        //I2C_w(KXTJ9_SLAVE_ADDR, KXTJ9_CTRL_REG1, cmd, 1);
  23   1        
  24   1        cmd[0] = 0x80;
  25   1        I2C_w(KXTJ9_SLAVE_ADDR, KXTJ9_CTRL_REG2, cmd, 1);   // ctrl-reg2 1000-0000
  26   1        //DelayMS(100);
  27   1        do{ 
  28   2          I2C_r(KXTJ9_SLAVE_ADDR, KXTJ9_CTRL_REG2, cmd, 1);
  29   2          //DelayMS(50);
  30   2          //LCD_show(cmd[0]); 
  31   2          //DelayMS(25);
  32   2        }while(cmd[0]&0x80) ;                 //??
  33   1        
  34   1      
  35   1        //Initialize CTRL_REG1                  //  ctrl-reg1 0000-0000
  36   1        cmd[0] = 0x00;
  37   1        I2C_w(KXTJ9_SLAVE_ADDR, KXTJ9_CTRL_REG1, cmd, 1);
  38   1          
  39   1        //Initialize CTRL_REG2                  //  ctrl-reg2 0000-0000
  40   1        cmd[0] = 0x00;
  41   1        I2C_w(KXTJ9_SLAVE_ADDR, KXTJ9_CTRL_REG2, cmd, 1);
  42   1      
  43   1        //Initialize INT_CTRL1          //   int-ctrl1,2 0001-0000,0011-1111
  44   1        cmd[0]=0x38;
  45   1        I2C_w(KXTJ9_SLAVE_ADDR, KXTJ9_INT_CTRL_REG1, cmd, 1);
  46   1        
  47   1        //Initialize INT_CTRL1          //   int-ctrl1,2 0001-0000,0011-1111
  48   1        cmd[0]=0x06;
  49   1        I2C_w(KXTJ9_SLAVE_ADDR, KXTJ9_DATA_CTRL_REG1, cmd, 1);
  50   1        
  51   1        I2C_r(KXTJ9_SLAVE_ADDR, KXTJ9_DATA_CTRL_REG1, cmd, 2);
  52   1        LCD_show(0x3001);DelayMS(5000);
  53   1        LCD_show(cmd[0]);DelayMS(5000);
  54   1        
C51 COMPILER V9.53.0.0   KXTJ9_1005                                                        11/28/2016 16:31:24 PAGE 2   

  55   1        //cmd[0]=0x22;
  56   1        //I2C_r(KXTJ9_SLAVE_ADDR, KXTJ9_INT_CTRL_REG1, cmd, 1);
  57   1        //DelayMS(50);
  58   1        //LCD_show(cmd[0]); 
  59   1        //DelayMS(25);
  60   1        /*
  61   1        do{ 
  62   1          I2C_r(KXTJ9_SLAVE_ADDR, KXTJ9_CTRL_REG1, cmd, 2);
  63   1          DelayMS(25);
  64   1        }while((cmd[0]&0x80)&(cmd[1]&0x3f)) ;
  65   1          */
  66   1          
  67   1        //cmd[0] = 0x3f;
  68   1        //I2C_w(KXTJ9_SLAVE_ADDR, KXTJ9_INT_CTRL_REG2, cmd, 1);
  69   1      }
  70          
  71          void KXTJ9_Set_Resolution(uint high){
  72   1        
  73   1        uchar cmd;
  74   1        
  75   1        KXTJ9_prep();
  76   1         
  77   1        //Load CTRL_REG1 to cmd                   
  78   1        I2C_r(KXTJ9_SLAVE_ADDR, KXTJ9_CTRL_REG1, &cmd, 1);
  79   1      
  80   1        if(cmd & 0x80){     //check whether PC1==1
  81   2          cmd &= (~0x80);   //Set PC1 = 0           //cmd = 0xxx-xxxx
  82   2          I2C_w(KXTJ9_SLAVE_ADDR, KXTJ9_CTRL_REG1, &cmd, 1);
  83   2        }
  84   1        
  85   1        if(high)
  86   1          cmd |= 0x40;
  87   1        else
  88   1          cmd &= (~0x40);
  89   1      
  90   1        I2C_w(KXTJ9_SLAVE_ADDR, KXTJ9_CTRL_REG1, &cmd, 1);
  91   1      
  92   1      }
  93          
  94          
  95          void KXTJ9_Set_Range(uint range){
  96   1      
  97   1        uchar cmd;
  98   1        
  99   1        //Load CTRL_REG1 to cmd
 100   1        I2C_r(KXTJ9_SLAVE_ADDR, KXTJ9_CTRL_REG1, &cmd, 1);
 101   1      
 102   1        if(cmd & 0x80){     //if PC1==1, Set PC1 = 0
 103   2          cmd &= (~0x80);   
 104   2          I2C_w(KXTJ9_SLAVE_ADDR, KXTJ9_CTRL_REG1, &cmd, 1);
 105   2        }
 106   1      
 107   1        cmd &= 0xE7;  //0x11100111
 108   1        if(range==4)
 109   1          cmd |= 0x08;
 110   1        else if(range == 8)
 111   1          cmd |= 0x10;
 112   1      
 113   1      
 114   1        cmd |= 0x20;
 115   1        I2C_w(KXTJ9_SLAVE_ADDR, KXTJ9_CTRL_REG1, &cmd, 1);
 116   1      
C51 COMPILER V9.53.0.0   KXTJ9_1005                                                        11/28/2016 16:31:24 PAGE 3   

 117   1      }  
 118          void KXTJ9_Get_Acceleration(int* a_x,int* a_y, int* a_z){
 119   1        
 120   1        uchar cmd;
 121   1      
 122   1        uchar data_out[2];
 123   1      
 124   1        //Load CTRL_REG1 to cmd
 125   1        I2C_r(KXTJ9_SLAVE_ADDR, KXTJ9_CTRL_REG1, &cmd, 1);
 126   1        LCD_show(0x2000);DelayMS(5000);
 127   1        LCD_show(cmd);DelayMS(5000);
 128   1      
 129   1        if((cmd & 0x80) == 0){      //if PC1==0; Set PC1 = 1
 130   2          cmd |= 0x80;    
 131   2          I2C_w(KXTJ9_SLAVE_ADDR, KXTJ9_CTRL_REG1, &cmd, 1);
 132   2        }
 133   1      
 134   1        //----------------------TEST---------------
 135   1        I2C_r(KXTJ9_SLAVE_ADDR, KXTJ9_CTRL_REG1, &cmd, 1);
 136   1        LCD_show(0x1000);DelayMS(5000);
 137   1        LCD_show(cmd);DelayMS(5000);
 138   1        
 139   1        I2C_r(KXTJ9_SLAVE_ADDR, KXTJ9_STATUS_REG, &cmd, 1);
 140   1        LCD_show(0x1001);DelayMS(5000);
 141   1        LCD_show(cmd);DelayMS(5000);
 142   1        
 143   1        I2C_r(KXTJ9_SLAVE_ADDR, KXTJ9_DATA_CTRL_REG1, &cmd, 1);
 144   1        LCD_show(0x1002);DelayMS(5000);
 145   1        LCD_show(cmd);DelayMS(5000);
 146   1        
 147   1        /*I2C_r(KXTJ9_SLAVE_ADDR, KXTJ9_DCST_RESP, &cmd, 1);
 148   1        LCD_show(0x1000);DelayMS(5000);
 149   1        LCD_show(cmd);DelayMS(5000);
 150   1        
 151   1        I2C_r(KXTJ9_SLAVE_ADDR, KXTJ9_WHO_AM_I, &cmd, 1);
 152   1        LCD_show(0x1001);DelayMS(5000);
 153   1        LCD_show(cmd);DelayMS(5000);
 154   1        
 155   1        I2C_r(KXTJ9_SLAVE_ADDR, KXTJ9_DATA_CTRL_REG1, &cmd, 1);
 156   1        LCD_show(0x1002);DelayMS(5000);
 157   1        LCD_show(cmd);DelayMS(5000);
 158   1        
 159   1        I2C_r(KXTJ9_SLAVE_ADDR, KXTJ9_STATUS_REG, &cmd, 1);
 160   1        LCD_show(0x1003);DelayMS(5000);
 161   1        LCD_show(cmd);DelayMS(5000);
 162   1        
 163   1        I2C_r(KXTJ9_SLAVE_ADDR, KXTJ9_INT_CTRL_REG1, &cmd, 1);
 164   1        LCD_show(0x1004);DelayMS(5000);
 165   1        LCD_show(cmd);DelayMS(5000);
 166   1        
 167   1        I2C_r(KXTJ9_SLAVE_ADDR, KXTJ9_CTRL_REG2, &cmd, 1);
 168   1        LCD_show(0x1005);DelayMS(5000);
 169   1        LCD_show(cmd);DelayMS(5000);*/
 170   1        
 171   1        //read acceleration of x-axis
 172   1        I2C_r(KXTJ9_SLAVE_ADDR, KXTJ9_XOUT_L, data_out, 2);
 173   1        LCD_show(0x2001);DelayMS(5000);
 174   1        LCD_show(data_out[1]);DelayMS(5000);
 175   1        LCD_show(data_out[0]);DelayMS(5000);
 176   1        *a_x = (data_out[1] << 4) | (data_out[0] >> 4)  ;
 177   1        
 178   1        //read acceleration of y-axis
C51 COMPILER V9.53.0.0   KXTJ9_1005                                                        11/28/2016 16:31:24 PAGE 4   

 179   1        I2C_r(KXTJ9_SLAVE_ADDR, KXTJ9_YOUT_L, data_out, 2);
 180   1        LCD_show(0x2002);DelayMS(5000);
 181   1        LCD_show(data_out[1]);DelayMS(5000);
 182   1        LCD_show(data_out[0]);DelayMS(5000);
 183   1        *a_y = (data_out[1] << 4) | (data_out[0] >> 4)  ;
 184   1      
 185   1        //read acceleration of z-axis
 186   1        I2C_r(KXTJ9_SLAVE_ADDR, KXTJ9_ZOUT_L, data_out, 2);
 187   1        LCD_show(0x2003);DelayMS(5000);
 188   1        LCD_show(data_out[1]);DelayMS(5000);
 189   1        LCD_show(data_out[0]);DelayMS(5000);
 190   1        *a_z = (data_out[1] << 4) | (data_out[0] >> 4)  ;
 191   1        
 192   1        
 193   1        /*
 194   1          //read acceleration of x-axis
 195   1        I2C_r(KXTJ9_SLAVE_ADDR, 0x07, a_x, 1);
 196   1        //*a_x = data_out;//(data_out[1] << 4) | (data_out[0] >> 4) ;
 197   1        LCD_show(*a_x);DelayMS(5000);
 198   1        
 199   1        //read acceleration of y-axis
 200   1        I2C_r(KXTJ9_SLAVE_ADDR, 0x09, a_y, 1);
 201   1        //*a_y = data_out;//(data_out[1] << 4) | (data_out[0] >> 4) ;
 202   1        LCD_show(*a_y);DelayMS(5000);
 203   1        
 204   1        //read acceleration of z-axis
 205   1        I2C_r(KXTJ9_SLAVE_ADDR, 0x0B, a_z, 1);
 206   1        //*a_z = data_out;//(data_out[1] << 4) | (data_out[0] >> 4) ;
 207   1        LCD_show(*a_z);DelayMS(5000);*/
 208   1      
 209   1      } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1027    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      20
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
